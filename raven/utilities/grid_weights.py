from functools import wraps
from pathlib import Path
from typing import List
from typing import Union
import logging
import tempfile

from pyproj import CRS
import geopandas

from raven.utils import archive_sniffer

ESRI_102008 = "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"


def _use_paths(func):
    @wraps(func)
    def func_wrapper(**kwargs):
        for kwarg in kwargs:
            if isinstance(kwargs[kwarg], str):
                kwargs[kwarg] = Path(kwargs[kwarg])
        return func(**kwargs)
    return func_wrapper


@_use_paths
def calc_gridweights(
    *,
    hru_shape: Union[Path, str] = None,
    grd_shape: Union[Path, str] = None,
    valid_ids: List[Union[str, int, Path]] = None,
    output: Union[str, Path] = None,
) -> None:
    """

    Parameters
    ----------
    hru_shape: Union[Path, str]
    grd_shape: Union[Path, str]
    valid_ids: List[Union[str, int]]
    output: Union[Path, str]

    Returns
    -------
    List[Union[str, int]]
    """
    albers_equal_area_conic = CRS.from_proj4(ESRI_102008)

    hru = geopandas.read_file(hru_shape)
    if "HRU_ID" not in hru.columns:
        raise NameError(f"Grid cell column name {hru_shape.stem[:-4]} not in {hru_shape.stem}")

    grd = geopandas.read_file(grd_shape)
    if "GridIDs" not in grd.columns:
        raise NameError(f"Grid cell column name {grd_shape.stem[:-4]} not in {grd_shape.stem}")

    logging.info("Buffering with distance of zero to fix geometries.")
    hru.geometry = hru.buffer(0)
    grd.geometry = grd.buffer(0)

    logging.info(f"Reprojecting data to Equal Area Conic for North America ({ESRI_102008})")
    hru_geo = hru.to_crs(albers_equal_area_conic)
    grd_geo = grd.to_crs(albers_equal_area_conic)

    logging.info("Intersection geometries.")
    intersected = geopandas.overlay(hru_geo, grd_geo)
    intersected["area"] = intersected.geometry.area
    intersected["HRU_ID"] = intersected["HRU_ID"].apply(int)
    intersected["GridIDs"] = intersected["GridIDs"].apply(int)

    isect = intersected[["area", "HRU_ID", "GridIDs", "geometry"]]

    # write grid weights file
    with open(output, "w") as f:
        f.write(f"grid weights file generated by Raven `{calc_gridweights.__name__}` process\n")
        f.write("-------------------------------------------------\n")
        f.write(":GridWeights\n")
        f.write(f"  :NumberHRUs {len(hru)}\n")
        f.write(f"  :NumberGridCells {len(grd)}\n")


if __name__ == '__main__':
    testdata = Path().cwd().joinpath("testdata")
    hru_file = testdata.joinpath("RedDeerHRUs.zip")
    grd_file = testdata.joinpath("RDPS_GridRedDeer3.zip")
    nc_file = testdata.joinpath("2017052200.nc")

    with tempfile.TemporaryDirectory() as directory:
        hru = archive_sniffer(hru_file, directory)[0]
        grd = archive_sniffer(grd_file, directory)[0]
        calc_gridweights(hru_shape=hru, grd_shape=grd, valid_ids=[nc_file], output=Path.cwd().joinpath("test.txt"))
